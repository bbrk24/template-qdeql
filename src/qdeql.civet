{ writeSync } from node:fs

* as stdqueue from std-queue
Queue := (stdqueue.default as! typeof stdqueue).default

assert from ./assert.civet
StdinReader from ./getchar.civet

putchar := (char: number): void =>
    assert => (char & 0xff) is char
    buf := Buffer.from [char]
    writeSync 1, buf, 0, 1

export default run := (s: string, enc: BufferEncoding): Promise<void> =>
    reader := new StdinReader enc

    q := new Queue<number>
    openSlashLocations: number[] := []

    try
        for i .= 0; i < s#; ++i
            switch s[i]
                '='
                    front := q.shift() ?? 0
                    q.push front
                '-'
                    front .= q.shift() ?? 0
                    front = (front - 1) %% 256
                    q.push front
                '*'
                    front := q.shift() ?? 0
                    try
                        putchar front
                    catch { message: /^EPIPE:/ }
                        return
                '&'
                    q.push await reader.getchar()
                '\\'
                    front := q.shift()
                    if front
                        openSlashLocations.push i
                        q.push front, 0, 0
                    else
                        slashCount .= 0
                        while slashCount >= 0
                            ++i
                            if i >= s#
                                throw new SyntaxError "Mismatched slashes (missing /)"
                            ++slashCount if s[i] is '\\'
                            --slashCount if s[i] is '/'
                '/'
                    i = openSlashLocations.pop() ?? throw new SyntaxError 'Mismatched slashes (missing \\)'
                    --i // to counteract the ++ normally found at the end of the loop
                else
                    continue
    finally
        reader.close()
