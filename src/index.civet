'civet coffeeDo coffeePrototype'

/*!
Copyright 2024 William Baker

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

{ AssertionError } from node:assert
{ readFileSync, writeFileSync } from node:fs
yargs from yargs
parse from ./parser.civet
compile from ./compiler.civet

run := try run from ./qdeql.civet

encodings: readonly BufferEncoding[] :=
    . 'ascii'
    . 'latin1'
    . 'ucs-2'
    . 'ucs2'
    . 'utf16le'
    . 'utf-8'
    . 'utf8'

argv := await yargs process.argv[2...]
    .alias h: 'help'
    .positional 'filename',
        describe: 'What file to use as input'
        type: 'string'
    .demandCommand()
    .options
        output:
            alias: 'o'
            describe: 'Where to write the Qdeql code to (default: stdout)'
            normalize: true
            type: 'string'
        indent:
            alias: 't'
            describe: 'What string to use for indentation (default: 2 spaces)'
            type: 'string'
        'ast-only':
            alias: 'a'
            describe: 'Only emit the AST'
            type: 'boolean'
        encoding:
            alias: 'e'
            choices: encodings
            default: 'utf8'
            describe: 'What encoding to use for input' // output is always UTF-8
            coerce: (enc) =>
                // ignore case, and allow 'utf-16le' as a synonym for 'utf16le'
                littleEnc := enc.toLowerCase()
                return 'utf16le' if littleEnc is 'utf-16le'
                if littleEnc is not in encodings
                    // throw an error indicating an invalid encoding
                    throw new Error ```
                        Invalid values:
                          Argument: encoding, Given: "${enc}", Choices: "${encodings.join '", "'}"
                        ```
                return littleEnc as BufferEncoding
        run:
            alias: 'r'
            conflicts: ['a', 'o', 't']
            describe: 'Run the Qdeql code rather than outputting it'
            type: 'boolean'
            hidden: not run?
            coerce: unless run? then => throw new Error "--run may only be specified when std-queue is installed"
    .strict()
    .argv

makeErrorString := (err: ???): string =>
    if err <? Error
        if process.env.DEBUG
            if Object::hasOwnProperty.call err, 'cause'
                return `${err.name}: ${err.message}\ncause: ${makeErrorString err.cause}`
            else if err.stack?
                return err.stack
        `${err.name}: ${err.message}`
    else
        String err

process.exitCode = do =>
    input := try readFileSync argv._.0, { argv.encoding } catch err
        console.error `Could not read file: ${makeErrorString err}`
        return 1

    ast := try parse input catch err
        if err <? AssertionError
            console.error 'DEBUG ASSERTION FAILED'
            console.error err
        else
            console.error makeErrorString err
        return 1
    
    result := if argv.astOnly then JSON.stringify ast else
        try compile ast, argv.indent ?? '  ' catch err
            if err <? AssertionError
                console.error 'DEBUG ASSERTION FAILED'
                console.error err
            else
                console.error makeErrorString err
            return 1

    if argv.run
        try await run! result, argv.encoding catch err
            if err <? AssertionError
                console.error 'DEBUG ASSERTION FAILED'
                console.error err
            else
                console.error makeErrorString err
            return 1
    else if argv.output?
        try
            writeFileSync
                argv.output
                result
                mode: 0o644
        catch err
            console.error `Could not save program: ${makeErrorString err}`
            return 1
    else
        console.log result.trimEnd()

    return 0
|> await
